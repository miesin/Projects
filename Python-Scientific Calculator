#BUIDING A SCIENTIFIC CALCULATOR
from tkinter import*
import math
import parser
import tkinter.messagebox
root=Tk() #root contains all items in a tkinter
root.title("Scientific calculator")
root.configure(background="powder blue")
root.resizable(width=False, height=False)
root.geometry("480x568+0+0") #the 0 + 0 means it should start from the top left hand corner

calc = Frame(root) #frame is a container for widgets
calc.grid()
menubar = Menu(calc)

class Calc():
    def __init__(self):
        self.total = 0
        self.current = ""
        self.input_value = True
        self.check_sum = False
        self.op = ""
        self.result = False
    def numberEnter(self, num):
        self.result = False
        firstNum = txtDisplay.get()
        secondNumber=str(num)
        if self.input_value:
            self.current = secondNumber
            self.input_value = False
        else:
            if secondNumber==".":
                if secondNumber in firstNum:
                    return
            #if secondNumber ==",":
             #   if secondNumber in firstNum:
              #      return
            self.current = firstNum + secondNumber# whateve is on the screen (dispaly) plus the input
        self.display(self.current)
    def sum_of_total(self):
        self.result=True
        self.current = float(self.current)
        if self.check_sum == True:
            self.valid_function()
        else:
            self.total = float(txtDisplay.get())
    def display(self, value):
        txtDisplay.delete(0,END)
        txtDisplay.insert(0, value)
    def valid_function(self):
        if self.op == "add":
            self.total += self.current
        if self.op == "sub":
            self.total -= self.current
        if self.op == "mult":
            self.total *= self.current
        if self.op == "divide":
            self.total /= self.current
        if self.op == "Mod":
            self.total %= self.current
        #if self.op == ".":
         #   self.total -= self.current
        #if self.op == ",":
         #   self.total -= self.current
        self.input_value=True
        self.check_sum=False
        self.display(self.total)
    def operation(self,op):
        self.current = float(self.current)
        if self.check_sum:
            self.valid_function()
        elif not self.result:
            self.total= self.current
            self.input_value = True
            self.check_sum = True
            self.op = op
            self.result = False
    def pi(self):
        self.result = False
        self.current = math.pi
        self.display(self.current)
    def tau(self):
        self.result = False
        self.current = math.tau
        self.display(self.current)
    def e(self):
        self.result = False
        self.current = math.e
        self.display(self.current)
    def sq(self):
        self.result = False
        self.current = math.sqrt(float(txtDisplay.get()))
        self.display(self.current)
    def cos(self):
        self.result = False
        self.current = math.cos(math.radians(float(txtDisplay.get ())))
        self.display(self.current)
    def sin(self):
        self.result = False
        self.current = math.sin(math.radians(float(txtDisplay.get())))
        self.display(self.current)
    def tan(self):
        self.result = False
        self.current = math.tan(math.radians(float(txtDisplay.get())))
        self.display(self.current)

    def log(self):
        self.result = False
        self.current = math.log(float(txtDisplay.get()))
        self.display(self.current)
    def cosh(self):
        self.result = False
        self.current = math.cosh(math.radians(float(txtDisplay.get())))
        self.display(self.current)
    def sinh(self):
        self.result = False
        self.current = math.sinh(math.radians(float(txtDisplay.get())))
        self.display(self.current)
    def tanh(self):
        self.result = False
        self.current = math.tanh(math.radians(float(txtDisplay.get())))
        self.display(self.current)
    def exp(self):
        self.result = False
        self.current = math.exp(float(txtDisplay.get()))
        self.display(self.current)
    def log2(self):
        self.result = False
        self.current = math.log2(float(txtDisplay.get()))
        self.display(self.current)
    def Acosh(self):
        self.result = False
        self.current = math.acosh(float(txtDisplay.get()))
        self.display(self.current)
    def Asinh(self):
        self.result = False
        self.current = math.asinh(float(txtDisplay.get()))
        self.display(self.current)
    def Deg(self):
        self.result = False
        self.current = math.degrees(float(txtDisplay.get()))
        self.display(self.current)

    def log10(self):
        self.result = False
        self.current = math.log10(float(txtDisplay.get()))
        self.display(self.current)
    def log1p(self):
        self.result = False
        self.current = math.log1p(float(txtDisplay.get()))
        self.display(self.current)
    def expm1(self):
        self.result = False
        self.current = math.expm1(float(txtDisplay.get()))
        self.display(self.current)
    def lgamma(self):
        self.result = False
        self.current = math.lgamma(float(txtDisplay.get()))
        self.display(self.current)
    def clear_entry(self):
        self.result = False
        self.current = "0"
        self.display(0)
        self.input_value = True
    def all_clear_entry(self):
        self.clear_entry()
        self.total = 0

added_value = Calc()

txtDisplay=Entry(calc, font=("arial",20,"bold"), bg = "powder blue", bd=30, width=28, justify=RIGHT)
txtDisplay.grid(row=0, column=0, columnspan=3, pady = 1)
txtDisplay.insert(0,"0")

numberpad="789456123"
i = 0 #this is currently representing index 0 which is number 7
btn=[]
for j in range(2,5): #grid has rows and colums and 0 has been taken so we can take 1 or 2 (here)
    for k in range(3):
        btn.append(Button(calc, width = 6, height = 2, font=("arial",20,"bold"), bd=4, text=numberpad[i]))
        btn[i].grid(row=j, column=k, pady = 1)
        btn[i]["command"] = lambda x = numberpad[i]: added_value.numberEnter(x)
        i+=1 #the index now increases to number 8

btnclear = Button(calc, text= chr(67), width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.clear_entry,bg = "powder blue").grid(row=1, column=1, pady=1)
btnAllclear = Button(calc, text= chr(67) + chr(69), width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.all_clear_entry, bg = "blue").grid(row=1, column=0, pady=1)
btnSq = Button(calc, text= "±", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.sq, bg = "powder blue").grid(row=1, column=2, pady=1)
btnAdd = Button(calc, text= "+", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = lambda:added_value.operation("add"), bg = "blue").grid(row=1, column=3, pady=1)
btnSubt = Button(calc, text= "-", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = lambda:added_value.operation("sub"), bg = "powder blue").grid(row=2, column=3, pady=1)
btnDiv = Button(calc, text= "÷", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = lambda:added_value.operation("divide"),bg = "blue").grid(row=3, column=3, pady=1)
btnMult = Button(calc, text= "*", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = lambda:added_value.operation("mult"),bg = "blue").grid(row=4, column=3, pady=1)

btnzero = Button(calc, text= "0", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  bg = "blue", command = lambda:added_value.numberEnter(0)).grid(row=5, column=0, pady=1)
btndot = Button(calc, text= ".", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = lambda:added_value.numberEnter("."), bg = "powder blue").grid(row=5, column=1, pady=1)
btncomma = Button(calc, text= ",", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                   command = lambda:added_value.numberEnter(","), bg = "blue").grid(row=5, column=2, pady=1)
btnequal = Button(calc, text= "=", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  bg = "blue", command = added_value.sum_of_total).grid(row=5, column=3, pady=1)

#==================Scientific Calculator====================
btnpi = Button(calc, text= "π", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  bg = "blue", command = added_value.pi).grid(row=1, column=4, pady=1)
btncos = Button(calc, text= "cos", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.cos,bg = "powder blue").grid(row=1, column=5, pady=1)
btnsin = Button(calc, text= "sine", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.sin,bg = "blue").grid(row=1, column=6, pady=1)
btntan = Button(calc, text= "tan", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.tan, bg = "blue").grid(row=1, column=7, pady=1)

btn2pi = Button(calc, text= "2π", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.tau).grid(row=2, column=4, pady=1)
btncosh = Button(calc, text= "cosh", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.cosh).grid(row=2, column=5, pady=1)
btnsinh = Button(calc, text= "sinh", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.sinh).grid(row=2, column=6, pady=1)
btntanh = Button(calc, text= "tanh", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.tanh).grid(row=2, column=7, pady=1)

btnlog = Button(calc, text= "log", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.log).grid(row=3, column=4, pady=1)
btnexp = Button(calc, text= "exp", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.exp).grid(row=3, column=5, pady=1)
btnMod = Button(calc, text= "Mod", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = lambda:added_value.operation("Mod")).grid(row=3, column=6, pady=1)
btne = Button(calc, text= "e", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.e).grid(row=3, column=7, pady=1)
btnlog2 = Button(calc, text= "log2", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.log2).grid(row=4, column=4, pady=1)
btnAcosh = Button(calc, text= "Acosh", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.Acosh).grid(row=4, column=5, pady=1)
btnAsinh = Button(calc, text= "Asinh", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.Asinh).grid(row=4, column=6, pady=1)
btnDeg = Button(calc, text= "Deg", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.Deg).grid(row=4, column=7, pady=1)
btnlog10 = Button(calc, text= "log10", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.log10).grid(row=5, column=4, pady=1)
btnlog1p = Button(calc, text= "log1p", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.log1p).grid(row=5, column=5, pady=1)
btnexpm1 = Button(calc, text= "expm1", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.expm1).grid(row=5, column=6, pady=1)
btnlgamma = Button(calc, text= "lgamma", width = 6, height = 2, font=("arial",20,"bold"), bd=4,
                  command = added_value.lgamma).grid(row=5, column=7, pady=1)

lblDisplay=Label(calc, text="Scientific calculator", font=("arial",30,"bold"), justify=CENTER)
lblDisplay.grid(row=0, column=4, columnspan=4)





#===============Menu and functions========================
def iExit():
    iExit=tkinter.messagebox.askyesno("Scientific calculator", "Do you want to exit?")
    if iExit>0:
        root.destroy()
        return

def Scientific():
    root.resizable(width=False, height=False)
    root.geometry("944x568+0+0")
def Standard():
    root.resizable(width=False, height=False)
    root.geometry("480x568+0+0")


filemenu = Menu(menubar, tearoff=0)
menubar.add_cascade(label="File", menu=filemenu)
filemenu.add_command(label = "Standard", command=Standard)
filemenu.add_command(label = "Scientific", command=Scientific )
filemenu.add_separator()
filemenu.add_command(label = "Exit", command=iExit)

editmenu = Menu(menubar, tearoff=0)
menubar.add_cascade(label="Edit", menu=editmenu)
editmenu.add_command(label = "Copy")
editmenu.add_command(label = "Cut")
editmenu.add_separator()
editmenu.add_command(label = "Paste")

helpmenu = Menu(menubar, tearoff=0)
menubar.add_cascade(label="help", menu=helpmenu)
helpmenu.add_command(label = "View Help")

root.config(menu=menubar)
root.mainloop()
